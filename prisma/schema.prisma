generator client {
  provider = "prisma-client-js"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  firstName     String?
  lastName      String?
  email         String?      @unique
  emailVerified DateTime?
  role          Role?
  image         String?
  dateOfBirth   DateTime? //@db.
  phoneNumber   String? //@db.
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  address       AddressInfo?
  // shelterUser   ShelterUser?
  accounts      Account[]
  sessions      Session[]

  @@index([name])
}

// model ShelterUser {
//   id     String @id @default(cuid())
//   // Other fields specific to users involved with a shelter
//   user   User   @relation(fields: [userId], references: [id])
//   userId String @unique
//   // Uncomment when Shelter model is added
//   // shelter   Shelter   @relation(fields: [shelterId], references: [id])
//   // shelterId String @unique
// }

model AddressInfo {
  id        String   @id @default(cuid())
  address   String
  city      String
  postCode  String
  state     String
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?  @unique
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  Adopter
  Shelter
  Admin
}
