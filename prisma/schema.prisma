generator client {
  provider = "prisma-client-js"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  firstName     String?
  lastName      String?
  email         String?      @unique
  emailVerified DateTime?
  role          Role?
  image         String?
  dateOfBirth   DateTime?    @db.Date
  phoneNumber   String?      @db.VarChar(13)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  address       AddressInfo?
  adoptedPets   Pet[]
  worksAt       Shelter?     @relation(fields: [shelterId], references: [id])
  shelterId     String?
  accounts      Account[]
  sessions      Session[]

  @@index([name])
  @@index([shelterId])
  @@index([emailVerified])
}

model AddressInfo {
  id        String   @id @default(cuid())
  address   String?
  city      String?
  postCode  String?
  state     String?
  country   String?
  lat       String?
  lng       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?  @unique
  shelter   Shelter? @relation(fields: [shelterId], references: [id], onDelete: Cascade)
  shelterId String?  @unique
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Shelter {
  id          String       @id @default(cuid())
  name        String
  logo        String?
  description String?
  email       String?      @unique
  phoneNumber String?      @db.VarChar(13)
  taxId       Int
  website     String?
  address     AddressInfo?
  pets        Pet[]
  members     User[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([taxId])
  @@index([name])
}

model Pet {
  id                   String           @id @default(cuid())
  internalId           String?
  image                String?
  name                 String?
  species              String?
  breed                String?
  gender               String?
  age                  String?
  color                String?
  coat                 String?
  weight               Float?
  adoptionFee          String?
  adoptionFeeKnown     Boolean?
  dateOfBirth          DateTime         @db.Date
  status               String?
  description          String?          @db.VarChar(1000)
  houseTrained         String?          @db.VarChar(5)
  specialNeeds         String?          @db.VarChar(5)
  neutered             String?          @db.VarChar(5)
  declawed             String?          @db.VarChar(5)
  aggressive           String?          @db.VarChar(5)
  friendlyWithDogs     String?          @db.VarChar(5)
  friendlyWithCats     String?          @db.VarChar(5)
  friendlyWithChildren String?          @db.VarChar(5)
  microchipBrand       String?
  microchipNumber      String?
  availableForAdoption Boolean?
  shelter              Shelter          @relation(fields: [shelterId], references: [id], onDelete: Cascade)
  shelterId            String
  adoptedBy            User?            @relation(fields: [adopterId], references: [id])
  adopterId            String?
  healthStatus         HealthStatus?
  medicalEvents        MedicalEvent[]
  intakeEventType      IntakeEventType?
  intakeEventDate      DateTime?
  outcomeEvents        OutcomeEvent[]
  photos               Photo[]
  notes                Note[]
  documents            Document[]
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt

  @@index([name])
  @@index([species])
  @@index([breed])
  @@index([gender])
  @@index([age])
  @@index([color])
  @@index([weight])
  @@index([adoptionFee])
  @@index([shelterId])
  @@index([adopterId])
}

model Photo {
  id    String  @id @default(cuid())
  url   String
  pet   Pet?    @relation(fields: [petId], references: [id], onDelete: Cascade)
  petId String?

  @@index([petId])
}

model Document {
  id        String   @id @default(cuid())
  name      String
  type      String?
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  pet       Pet?     @relation(fields: [petId], references: [id], onDelete: Cascade)
  petId     String?

  @@index([name])
  @@index([type])
  @@index([url])
  @@index([petId])
}

model MedicalEvent {
  id               String           @id @default(cuid())
  medicalEventType MedicalEventType
  eventDate        DateTime
  cost             Float?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  pet              Pet?             @relation(fields: [petId], references: [id], onDelete: Cascade)
  petId            String?

  @@index([medicalEventType])
  @@index([eventDate])
  @@index([cost])
  @@index([petId])
}

model OutcomeEvent {
  id        String           @id @default(cuid())
  eventType OutcomeEventType
  eventDate DateTime
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  pet       Pet?             @relation(fields: [petId], references: [id], onDelete: Cascade)
  petId     String?

  @@index([eventType])
  @@index([eventDate])
  @@index([petId])
}

model Note {
  id      String  @id @default(cuid())
  title   String?
  content String  @db.VarChar(500)
  pet     Pet?    @relation(fields: [petId], references: [id], onDelete: Cascade)
  petId   String?

  @@index([petId])
}

enum HealthStatus {
  HEALTHY
  INJURED
  SICK
  TREATED
  QUARANTINE
  DEAD
  UNKNOWN
}

enum MedicalEventType {
  VACCINATION
  DIAGNOSIS
  TREATMENT
  MEDICATION
  SURGERY
}

enum IntakeEventType {
  STRAY
  TRANSFER
  SURRENDER
  BORN
  RETURN
  OTHER
  UNKNOWN
}

enum OutcomeEventType {
  ADOPTION
  TRANSFER
  EUTHANIZED
  DIED
  RETURN
}

enum Role {
  Adopter
  Shelter
  Admin
}
